<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{a5c44ef1-80d5-49e6-a6d9-707131ff4ce8}</ProjectGuid>
    <SHFBSchemaVersion>1.8.0.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>.\Help\Release\</OutputPath>
    <HtmlHelpName>YAML Serializer</HtmlHelpName>
    <DocumentationSources>
      <DocumentationSource sourceFile="YamlSerializer.csproj" xmlns="" />
    </DocumentationSources>
    <HelpFileFormat>Help1xAndWebsite</HelpFileFormat>
    <FeedbackEMailAddress>osamu%40big.jp</FeedbackEMailAddress>
    <FeedbackEMailLinkText>Osamu TAKEUCHI</FeedbackEMailLinkText>
    <FooterText>
    </FooterText>
    <HelpTitle>YAML Serializer</HelpTitle>
    <IndentHtml>True</IndentHtml>
    <NamingMethod>MemberName</NamingMethod>
    <MissingTags>Summary, Parameter, Returns, AutoDocumentCtors, Namespace, TypeParameter</MissingTags>
    <Preliminary>False</Preliminary>
    <BuildLogFile>
    </BuildLogFile>
    <HtmlHelp1xCompilerPath>..\..\..\..\..\..\..\Program Files\Develop\HTML Help Workshop\</HtmlHelp1xCompilerPath>
    <HtmlHelp2xCompilerPath>
    </HtmlHelp2xCompilerPath>
    <SandcastlePath>
    </SandcastlePath>
    <WorkingPath>
    </WorkingPath>
    <VisibleItems>InheritedMembers, InheritedFrameworkMembers, Protected, SealedProtected</VisibleItems>
    <ApiFilter>
    </ApiFilter>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="(global)" isDocumented="False" />
<NamespaceSummaryItem name="System.Yaml" isDocumented="True">&lt;h3&gt;What is this for?&lt;/h3&gt;

&lt;para&gt;This class library supports YAML file manipulation in two different contexts.&lt;/para&gt;

&lt;ol&gt;

&lt;li&gt;One is to serialize / deserialize C# native objects into / from YAML text files. 
=&amp;gt; &lt;see cref="System.Yaml.Serialization.YamlSerializer"/&gt; &lt;/li&gt;

&lt;li&gt;The other is manipulating generic YAML documents that does not represents
C# object but does some logical data.
=&amp;gt; &lt;see cref="System.Yaml.YamlNode"/&gt; &lt;/li&gt;

&lt;/ol&gt;

&lt;h3&gt;Requirements&lt;/h3&gt;

.NET 3.5 SP1

&lt;h3&gt;What is YAML?&lt;/h3&gt;

&lt;para&gt;YAML is a human friendly data serialization standard for all programming languages.&lt;/para&gt;

&lt;para&gt;There is 
&lt;a href="http://yaml.codeplex.com/Wiki/View.aspx?title=YAML"&gt;a good introduction&lt;/a&gt;
in the &lt;a href="http://yaml.codeplex.com/"&gt;YAML for .NET, Visual Studio and Powershell&lt;/a&gt;
project.&lt;/para&gt;

According to that,

&lt;ol&gt;
&lt;li&gt;YAML is easily readable by humans.&lt;/li&gt;
&lt;li&gt;YAML is consise and compact.&lt;/li&gt;
&lt;li&gt;YAML is expressive and extensible.&lt;/li&gt;
&lt;/ol&gt;

&lt;para&gt;Another introduction can be found at 
&lt;a href="http://yaml.org/YAML_for_ruby.html"&gt;Yaml Cookbook.&lt;/a&gt;&lt;/para&gt;

&lt;para&gt;See &lt;a href="http://yaml.org/"&gt;The Official YAML Web Site&lt;/a&gt; for the language specification.&lt;/para&gt;

&lt;para&gt;Note that the top page of &lt;a href="http://yaml.org/"&gt;The Official YAML Web Site&lt;/a&gt; is written as a valid YAML 1.2 document. It is definitely human friendly.&lt;/para&gt;

&lt;h3&gt;YamlSerizlizer class&lt;/h3&gt;

&lt;para&gt;For the first purpose, &lt;see cref="System.Yaml.Serialization.YamlSerializer"&gt;
System.Yaml.Serialization.YamlSerializer&lt;/see&gt; class has instance methods
&lt;see cref="YamlSerializer.Serialize"/&gt; and &lt;see cref="YamlSerializer.Deserialize"/&gt;.
With these methods, C# native objects can be converted into / from YAML text without 
any preparations.&lt;/para&gt;

&lt;para&gt;&lt;code&gt;
// Simple(?) array of objects
object obj = new object[]{ 
    "a", 
    true, 
    1, 
    1.0, 
    new Point(1,3), 
    new YamlScalar("node") 
};

var serializer = new YamlSerializer();

// Serialize it. How difficult!
string yaml = serializer.Serialize( obj );

// %YAML 1.2
// ---
// - "a"
// - true
// - 1
// - !!float 1
// - !&amp;lt;!System.Drawing.Point&amp;gt; 1,3
// - !&amp;lt;!YamlSerializer.YamlScalar&amp;gt;
//   Tag: "tag:yaml.org,2002:str"
//   Value: "node"
// ...

// Deserialize it.
object restored = serializer.Deserialize(yaml)[0];

// In general, you can serialize multiple objects in a YAML stream.
// So the Deserialize method returns an array of objects.
&lt;/code&gt;&lt;/para&gt;

&lt;h3&gt;YamlNode class&lt;/h3&gt;

&lt;para&gt;For the second purpose, &lt;see cref="System.Yaml.YamlNode"&gt;System.Yaml.YamlNode&lt;/see&gt;
class and its descendant classes give the representation of YAML's data nodes.&lt;/para&gt;

&lt;para&gt;See &lt;see cref="YamlScalar"/&gt;, &lt;see cref="YamlSequence"/&gt; and
&lt;see cref="YamlMapping"/&gt; classes for the actual data classes.&lt;/para&gt;

&lt;para&gt;To read / write YAML text to compose / present &lt;see cref="YamlNode"/&gt; tree,  
the static method &lt;see cref="YamlNode.FromYaml"/&gt; and the instance method 
&lt;see cref="YamlNode.ToYaml"/&gt; are provided.&lt;/para&gt;

&lt;para&gt;&lt;code&gt;
YamlNode[] nodes = YamlNode.FromYaml(new System.IO.FileStream("settings.yaml"));
string yaml = nodes[0].ToYaml();
&lt;/code&gt;&lt;/para&gt;</NamespaceSummaryItem>
<NamespaceSummaryItem name="System.Yaml.Serialization" isDocumented="True">&lt;h3&gt;What is this for?&lt;/h3&gt;

&lt;para&gt;This class library supports YAML file manipulation in two different contexts.&lt;/para&gt;

&lt;ol&gt;

&lt;li&gt;One is to serialize / deserialize C# native objects into / from YAML text files. 
=&amp;gt; &lt;see cref="System.Yaml.Serialization.YamlSerializer"/&gt; &lt;/li&gt;

&lt;li&gt;The other is manipulating generic YAML documents that does not represents
C# object but does some logical data.
=&amp;gt; &lt;see cref="System.Yaml.YamlNode"/&gt; &lt;/li&gt;

&lt;/ol&gt;

&lt;h3&gt;Requirements&lt;/h3&gt;

.NET 3.5 SP1

&lt;h3&gt;What is YAML?&lt;/h3&gt;

&lt;para&gt;YAML is a human friendly data serialization standard for all programming languages.&lt;/para&gt;

&lt;para&gt;There is 
&lt;a href="http://yaml.codeplex.com/Wiki/View.aspx?title=YAML"&gt;a good introduction&lt;/a&gt;
in the &lt;a href="http://yaml.codeplex.com/"&gt;YAML for .NET, Visual Studio and Powershell&lt;/a&gt;
project.&lt;/para&gt;

According to that,

&lt;ol&gt;
&lt;li&gt;YAML is easily readable by humans.&lt;/li&gt;
&lt;li&gt;YAML is consise and compact.&lt;/li&gt;
&lt;li&gt;YAML is expressive and extensible.&lt;/li&gt;
&lt;/ol&gt;

&lt;para&gt;Another introduction can be found at 
&lt;a href="http://yaml.org/YAML_for_ruby.html"&gt;Yaml Cookbook.&lt;/a&gt;&lt;/para&gt;

&lt;para&gt;See &lt;a href="http://yaml.org/"&gt;The Official YAML Web Site&lt;/a&gt; for the language specification.&lt;/para&gt;

&lt;para&gt;Note that the top page of &lt;a href="http://yaml.org/"&gt;The Official YAML Web Site&lt;/a&gt; is written as a valid YAML 1.2 document. It is definitely human friendly.&lt;/para&gt;

&lt;h3&gt;YamlSerizlizer class&lt;/h3&gt;

&lt;para&gt;For the first purpose, &lt;see cref="System.Yaml.Serialization.YamlSerializer"&gt;
System.Yaml.Serialization.YamlSerializer&lt;/see&gt; class has instance methods
&lt;see cref="YamlSerializer.Serialize"/&gt; and &lt;see cref="YamlSerializer.Deserialize"/&gt;.
With these methods, C# native objects can be converted into / from YAML text without 
any preparations.&lt;/para&gt;

&lt;para&gt;&lt;code&gt;
// Simple(?) array of objects
object obj = new object[]{ 
    "a", 
    true, 
    1, 
    1.0, 
    new Point(1,3), 
    new YamlScalar("node") 
};

var serializer = new YamlSerializer();

// Serialize it. How difficult!
string yaml = serializer.Serialize( obj );

// %YAML 1.2
// ---
// - "a"
// - true
// - 1
// - !!float 1
// - !&amp;lt;!System.Drawing.Point&amp;gt; 1,3
// - !&amp;lt;!YamlSerializer.YamlScalar&amp;gt;
//   Tag: "tag:yaml.org,2002:str"
//   Value: "node"
// ...

// Deserialize it.
object restored = serializer.Deserialize(yaml)[0];

// In general, you can serialize multiple objects in a YAML stream.
// So the Deserialize method returns an array of objects.
&lt;/code&gt;&lt;/para&gt;

&lt;h3&gt;YamlNode class&lt;/h3&gt;

&lt;para&gt;For the second purpose, &lt;see cref="System.Yaml.YamlNode"&gt;System.Yaml.YamlNode&lt;/see&gt;
class and its descendant classes give the representation of YAML's data nodes.&lt;/para&gt;

&lt;para&gt;See &lt;see cref="YamlScalar"/&gt;, &lt;see cref="YamlSequence"/&gt; and
&lt;see cref="YamlMapping"/&gt; classes for the actual data classes.&lt;/para&gt;

&lt;para&gt;To read / write YAML text to compose / present &lt;see cref="YamlNode"/&gt; tree,  
the static method &lt;see cref="YamlNode.FromYaml"/&gt; and the instance method 
&lt;see cref="YamlNode.ToYaml"/&gt; are provided.&lt;/para&gt;

&lt;para&gt;&lt;code&gt;
YamlNode[] nodes = YamlNode.FromYaml(new System.IO.FileStream("settings.yaml"));
string yaml = nodes[0].ToYaml();
&lt;/code&gt;&lt;/para&gt;</NamespaceSummaryItem></NamespaceSummaries>
  </PropertyGroup>
  <!-- There are no properties for these two groups but they need to appear in
       order for Visual Studio to perform the build. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>
